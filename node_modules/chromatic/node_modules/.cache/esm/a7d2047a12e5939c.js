let writeFile,confirm,addedScript,notAddedScript,scriptNotFound;_12e‍.x([["default",()=>checkPackageJson]]);_12e‍.w("jsonfile",[["writeFile",["writeFile"],function(v){writeFile=v}]]);_12e‍.w("node-ask",[["confirm",["confirm"],function(v){confirm=v}]]);_12e‍.w("../ui/messages/info/addedScript",[["default",["addedScript"],function(v){addedScript=v}]]);_12e‍.w("../ui/messages/info/notAddedScript",[["default",["notAddedScript"],function(v){notAddedScript=v}]]);_12e‍.w("../ui/messages/warnings/scriptNotFound",[["default",["scriptNotFound"],function(v){scriptNotFound=v}]]);






const scriptName = 'chromatic';

const findScript = (scripts) =>
  scripts[scriptName] || Object.values(scripts).find((cmd) => cmd.startsWith(scriptName));

               async function checkPackageJson({ log, options, packageJson, packagePath }) {
  if (!options.interactive) return;

  try {
    const json = { ...packageJson };
    if (!json.scripts) json.scripts = {};
    if (findScript(json.scripts)) return;

    const scriptCommand = `npx chromatic ${options.originalArgv.join(' ')}`;

    log.info('');
    if (await confirm(scriptNotFound(scriptName))) {
      json.scripts[scriptName] = scriptCommand;
      await writeFile(packagePath, json, { spaces: 2 });
      log.info('');
      log.info(addedScript(scriptName));
    } else {
      log.info('');
      log.info(notAddedScript(scriptName, scriptCommand));
    }
  } catch (e) {
    log.warn(e);
  }
}
